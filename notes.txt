TODO:
[ ] VirtioBlkRequest needs to support multiple sectors: i.e. data[][512],
    currently just using a single sector
    - this will also require managing the memory for all the requests

[ ] %u format specifier in printf

2025-02-05
--------------------------------------------------------------------------------
I figured out the issues from yesterday regarding initializing virtqueue's.
There was a step in the spec, mentioned before step 1 (confusing..), to write
the page size to the GuestPageSize register before initializing virtqueues.
After doing this, then I can write the page NUMBER not physical address to the
QueuePFN register, and PAGE_SIZE to the QueueAlign register and the virtio-blk
device works as expected.

2025-02-04
--------------------------------------------------------------------------------
Virtio spec for virtqueues: https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html#x1-230005

The virtio spec for virtqueue initializations says step 6 is to write the
alignment of the used queue to the QueueAlign register and that this must be a
power of 2. However, Nuta writes 0. According to the spec this is incorrect.

From the spec:
Writing to this register notifies the device about alignment boundary of the
Used Ring in bytes. This value should be a power of 2 and applies to the queue
selected by writing to QueueSel.

Also for step 7, the spec says to write the physical page NUMBER of the first
page of the queue to the QueuePFN register. It explicitly says "this is an index
number of a page". However, Nuta writes the physical address of the page, not
the NUMBER. I believe this is a bug too.

From the spec: 
Writing to this register notifies the device about location of the virtual queue
in the Guestâ€™s physical address space. This value is the index number of a page
starting with the queue Descriptor Table. Value zero (0x0) means physical
address zero (0x00000000) and is illegal. When the driver stops using the queue
it writes zero (0x0) to this register. Reading from this register returns the
currently used page number of the queue, therefore a value other than zero (0x0)
means that the queue is in use. Both read and write accesses apply to the queue
selected by writing to QueueSel. 


what is __sync_synchronize() and why is it used in virtq_kick()

2025-02-03
--------------------------------------------------------------------------------
Today when implementing the shell in userland I got the following linker error
despite not using memset at all: "ld.lld: error: undefined symbol: memset"

I traced the source of the error to a line where I was declaring a buffer for the
command line as follows: char cmdline[256] = {0}; It seems that clang is
generating a memset for this line. I checked out the docs for clang and learned
that even when using the -ffreestanding flag, you have to provide certain
functions yourself. 

From the docs:

-ffreestanding
	Indicate that the file should be compiled for a freestanding, not a hosted,
	environment. Note that it is assumed that a freestanding environment will
	additionally provide memcpy, memmove, memset and memcmp implementations, as
	these are needed for efficient codegen for many programs.

2025-02-02
--------------------------------------------------------------------------------
Paging in RISC-V: https://osdev.wiki/wiki/RISC-V_Paging

Testing paging:
SATP: 80080245
      10000000 00001000 10000010 01000101
	- mode: 1
	- pysical page number where page table lives: 0x80245
	- address of table1: 0x80245000

Page table entry in table1 for virtual address 0x80000000: 0x20091801
	- page number: 0x80246
	- address of table0: 0x80246000
	- valid, not readable, not writable, not executable

Page table entry in table0 for virtual address 0x80000000: 0x200800cf
	- page number: 0x800200
	- address of page start: 0x800200000


Manually inspecting memory indicates that the page tables are all set up
correctly and working. However, using 'info mem' in qemu monitor yields no
results. Importantly, it doesn't say "No translation or protection" which is
what happens when the satp register is not enabled. So idk what is going on. I
replaced my map_page code with the books version with the same result. It makes
me suspect that info mem doesn't work properly, maybe because I'm on windows?
but im not sure there may be another error somewhere.


2025-02-01
--------------------------------------------------------------------------------
In yield, when context switching, we first save the very beginning of the stack
in sscratch so that the exception handler has a stable reference to the
process's stack in the case that sp is corrupted. In the exception handler
(kernel_entry), we retrieve a ref to the current process's stack from sscratch
and use it to store the execution context on the stack. However, since we always
use the beginning of the stack as the stable reference, this means that saving
the execution context will clobber anything that was on the stack. 

This seems not good to me, but is it expected that after an exception the stack
should remain stable? I feel like yeah but idk for sure. This part doesn't sit
right with me, but I will continue on with the book, maybe I will learn
something in the future that clarifies this.


2025-01-31
--------------------------------------------------------------------------------
I still don't understand why declaring a variable as an array on the c side
allows you to access a linker symbol without taking address, but using a pointer
type doesnt.

when defining a symbol in a linker script and then accessing the symbol as a
variable in c code, everything i read says that the type you declare on the c
side doesnt actually matter, so extern char my_symbol;

you use it by taking the address of the variable.

So U32 address = &my_symbol, will give you the address you are looking for.

However if you declare the variable as an array: extern char my_symbol[]; then
you can use the variable like: U32 address = my_symbol; However, if you declare
it as extern char *my_symbol; then it doesn't work, you still have


2025-01-30
--------------------------------------------------------------------------------

Machine Level CSRs
--------------------------------------------------------------------------------
medeleg: machine exception delegation register
mideleg: machine interrupt delegation register
	- implementations can provide individual read/write bits within medeleg and
	  mideleg to indicate that certain exceptions and interrupts should be
    processed directly by the S-mode trap handler

Supervisor Level CSRs
--------------------------------------------------------------------------------
stvec: supervisor trap vector
	- specifies where the trap handler is in memory

https://operating-system-in-1000-lines.vercel.app




