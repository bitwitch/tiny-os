TODO:
[ ] Go over full boot process

[ ] implement an actual filesystem, maybe start with vsfs from OSTEP
	[ ] create a filesystem image in vsfs format
	[ ] read the metadata into data structures

[ ] notion of current directory, and shell commands for navigating filesystem

[ ] actual commandline parsing

[ ] system timer
	[ ] implement scheduling based on timer interrupts
  - look into the OpenSBI spec for timer stuff

[ ] have reads from disk use interrupts to notify when read is complete rather
    than spinning 

[ ] system call to get diagnostics: how much memory free, number of procs
    running, etc.

[ ] exec system call?

[ ] VirtioBlkRequest needs to support multiple sectors: i.e. data[][512],
    currently just using a single sector
    - this will also require managing the memory for all the requests


[X] rewrite memmove in non stupid way
	[X] remove exit() in kernel
[X] %u format specifier in printf
[X] backspace in shell
[X] writefile syscall


Some important sections are marked with #-, (i.e. #- Section Title),
this is done so you can use your text editor easily search for them.


2025-02-26
--------------------------------------------------------------------------------

#- My implementation of vsfs:

block size:          4KB
inode on disk:       64 bytes each
max inodes:          4096
bitmap size:         4KB (one block)
inode table size:    256KB (64 blocks)
data region size:    16MB (4096 blocks)
   __________________________________________________________________________________
  |       |       |        |        |           |                                    |
  | boot  | super | inode  |  data  |   inode   |                data                |
  | block | block | bitmap | bitmap |   table   |               region               |
  |_______|_______|________|________|___________|____________________________________|
 0KB     4KB     8KB      12KB     16KB        272KB                              16656KB

boot block will be unused for now, but in the future could be used for a
bootloader for booting on physical hardware.

Need to create a program to write a disk image in this format. It could take a
directory path as input and write all the files and subdirectories to a disk.img
file.

Then in the kernel to initialize the filesystem, read file metadata into memory. 


Questions:
- how does writing to disk work on qemu? you can pass a disk image in as a file,
  does writing to disk directly affect this file?



2025-02-25
--------------------------------------------------------------------------------
https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system

FAT32 Filesystem
[ boot sector | info sector | reserved | file alloc table | data ]



2025-02-23
--------------------------------------------------------------------------------
reading the "Persistence" part of OSTEP:
Q: How should the OS manage a persistent device? What are the APIs?
What are the important aspects of the implementation?

A: essentially virtualize it as a filesystem and offer an interface to it.
api: open, close, read, write
one very important aspect is that disk reads and writes are slow, so the os
should employ technique to mitigate that (interrupts, DMA)

in xv6, each process has an array of open files, indexed by file descriptor:
struct proc {
	struct file *ofile[NOFILE]; // Open files
};

struct file {
	int ref;
	char readable;
	char writable;
	struct inode *ip;
	uint off;
};

struct inode {
  uint dev;           // Device number
  uint inum;          // Inode number
  int ref;            // Reference count
  struct sleeplock lock; // protects everything below here
  int valid;          // inode has been read from disk?

  short type;         // copy of disk inode
  short major;
  short minor;
  short nlink;
  uint size;
  uint addrs[NDIRECT+1];
};

Q: How can we build a simple file system? What structures are needed on the disk? 
What do they need to track? How are they accessed?

A: well for vsfs used in the book the approach is:
a super block, a bitmap for used inodes, a bitmap for used data blocks, an array
of inodes, and an array of data blocks
file metadata like type, size, location of data blocks, creation date, etc. are
stored in the inode table. they are accessed by traversing the inode table, by
following directories down a path like: "/one/two/three/file.txt"



2025-02-22
--------------------------------------------------------------------------------
reading the "Persistence" part of OSTEP:
Q: How should I/O be integrated into systems? What are the general mechanisms?
   How can we make them efficient?

A: connected to various busses. generally you can read data from the device like
status and other general data and write data to the device like commands. use
interrupts instead of spinning until ready for slow devices like disk. can also
use (Direct Memory Access) DMA to free up the cpu from copying large chunks of
data to a device.


2025-02-19
--------------------------------------------------------------------------------
#- Explanation of full boot process 
1. Once the virtual machine is powered on (starting qemu), it fills memory at
	 0x1000 with the first instructions to jump to and sets the program counter to
   0x1000. (The default reset vector in qemu is 0x1000)
2. These instructions are the Zero Stage Bootloader (ZSBL) which: 
	 - sets up a0 and a1 registers: a0 -> something to do with harts, a1 -> points
	   to a device tree struct (both irrelevant to me for this os)
	 - writes a pointer to a fw_dynamic_info struct into register a2, this struct
	   contains the next address for OpenSBI to jump to after it completes and the
		 next mode for the cpu to enter at this point, qemu must have populated this
		 struct with the address 0x80200000 and next mode S (Supervisor) during power up
   - jumps to address 0x80000000
3. 0x80000000 is where the first user-provided instructions CAN be. The -bios
   flag passed to qemu is used to tell the vm what to load at address 0x80000000
4. I am currently using -bios default which on the riscv32 virt machine loads
   OpenSBI at address 0x80000000
5. OpenSBI provides an interrupt-based interface to the kernel, I am assuming
   that all this code lives between 0x80000000 and 0x80200000
6. OpenSBI transfers the cpu into S mode and jumps to 0x80200000 (the address
   set up by ZSBL)
7. 0x80200000 is where my kernel is loaded (by specifying -kernel kernel.elf in
   the command line to run qemu). The kernel does the following initialization:
	 1. writes the address of the stack into the sp register
   2. zeros the bss section
   3. writes the address of the kernel's trap handler to the stvec register
   4. initializes the virtio-blk device
   5. initializes the filesystem

for more info see:
https://web.archive.org/web/20240225130852/https://popovicu.com/posts/risc-v-sbi-and-full-boot-process/

#- Explanation of all qemu flags used in the command line:
%QEMU% -machine virt -bios default -nographic -serial mon:stdio --no-reboot ^
       -d unimp,guest_errors,int,cpu_reset -D qemu.log ^
       -drive id=drive0,file=disk.tar,format=raw,if=none ^
       -device virtio-blk-device,drive=drive0,bus=virtio-mmio-bus.0 ^
       -kernel kernel.elf

-machine virt 
use RISC-V VirtIO board
https://www.qemu.org/docs/master/system/riscv/virt.html

-bios default 
load the default OpenSBI firmware (included with the QEMU release) 
all a user needs to do is specify the kernel they want to boot with the -kernel option

-nographic
disable graphical output so that QEMU is a simple command line application
this also multiplexes the console and the monitor to stdio

-serial mon:stdio 
redirect the virtual serial port to the host character device
"mon:stdio" creates a multiplexed stdio backend connected to the serial port and the QEMU monitor

--no-reboot
exit instead of rebooting

-d unimp,guest_errors,int,cpu_reset -D qemu.log
-d enables logging of specified items, -D specifies the file to output the log

-drive id=drive0,file=disk.tar,format=raw,if=none
specifies the file disk.tar to be loaded in drive0 in raw format
-drive combines the device and backend(blockdev) into a single command line option

-device virtio-blk-device,drive=drive0,bus=virtio-mmio-bus.0
add the device driver "virtio-blk-device"
specifies drive0 as the block device to use as backend
specifies the device is attached to virtio-mmio-bus.0 (if there are multiple
instances of MMIO buses they are indexed .0, .1, etc)

-kernel kernel.elf
use kernel.elf as kernel image (the kernel can either be a Linux kernel or in
multiboot format)


2025-02-12
--------------------------------------------------------------------------------
fork and exec? or some other way to spawn processes?

Essence Filesystem Blog Post
https://essence.handmade.network/blog/p/3067-the_filesystem%252C_version_1#14900


2025-02-05
--------------------------------------------------------------------------------
I figured out the issues from yesterday regarding initializing virtqueue's.
There was a step in the spec, mentioned before step 1 (confusing..), to write
the page size to the GuestPageSize register before initializing virtqueues.
After doing this, then I can write the page NUMBER not physical address to the
QueuePFN register, and PAGE_SIZE to the QueueAlign register and the virtio-blk
device works as expected.

As mentioned by Seiya, the FAT filesystem would be interesting to implement
instead of the tar format used in his book
https://en.wikipedia.org/wiki/Design_of_the_FAT_file_system

2025-02-04
--------------------------------------------------------------------------------
Virtio spec for virtqueues: https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html#x1-230005

The virtio spec for virtqueue initializations says step 6 is to write the
alignment of the used queue to the QueueAlign register and that this must be a
power of 2. However, Seiya writes 0. According to the spec this is incorrect.

From the spec:
Writing to this register notifies the device about alignment boundary of the
Used Ring in bytes. This value should be a power of 2 and applies to the queue
selected by writing to QueueSel.

Also for step 7, the spec says to write the physical page NUMBER of the first
page of the queue to the QueuePFN register. It explicitly says "this is an index
number of a page". However, Nuta writes the physical address of the page, not
the NUMBER. I believe this is a bug too.

From the spec: 
Writing to this register notifies the device about location of the virtual queue
in the Guest’s physical address space. This value is the index number of a page
starting with the queue Descriptor Table. Value zero (0x0) means physical
address zero (0x00000000) and is illegal. When the driver stops using the queue
it writes zero (0x0) to this register. Reading from this register returns the
currently used page number of the queue, therefore a value other than zero (0x0)
means that the queue is in use. Both read and write accesses apply to the queue
selected by writing to QueueSel. 


what is __sync_synchronize() and why is it used in virtq_kick()

2025-02-03
--------------------------------------------------------------------------------
Today when implementing the shell in userland I got the following linker error
despite not using memset at all: "ld.lld: error: undefined symbol: memset"

I traced the source of the error to a line where I was declaring a buffer for the
command line as follows: char cmdline[256] = {0}; It seems that clang is
generating a memset for this line. I checked out the docs for clang and learned
that even when using the -ffreestanding flag, you have to provide certain
functions yourself. 

From the docs:

-ffreestanding
	Indicate that the file should be compiled for a freestanding, not a hosted,
	environment. Note that it is assumed that a freestanding environment will
	additionally provide memcpy, memmove, memset and memcmp implementations, as
	these are needed for efficient codegen for many programs.

2025-02-02
--------------------------------------------------------------------------------
Paging in RISC-V: https://osdev.wiki/wiki/RISC-V_Paging

Testing paging:
SATP: 80080245
      10000000 00001000 10000010 01000101
	- mode: 1
	- pysical page number where page table lives: 0x80245
	- address of table1: 0x80245000

Page table entry in table1 for virtual address 0x80000000: 0x20091801
	- page number: 0x80246
	- address of table0: 0x80246000
	- valid, not readable, not writable, not executable

Page table entry in table0 for virtual address 0x80000000: 0x200800cf
	- page number: 0x800200
	- address of page start: 0x800200000


Manually inspecting memory indicates that the page tables are all set up
correctly and working. However, using 'info mem' in qemu monitor yields no
results. Importantly, it doesn't say "No translation or protection" which is
what happens when the satp register is not enabled. So idk what is going on. I
replaced my map_page code with the books version with the same result. It makes
me suspect that info mem doesn't work properly, maybe because I'm on windows?
but im not sure there may be another error somewhere.


2025-02-01
--------------------------------------------------------------------------------
In yield, when context switching, we first save the very beginning of the stack
in sscratch so that the exception handler has a stable reference to the
process's stack in the case that sp is corrupted. In the exception handler
(kernel_entry), we retrieve a ref to the current process's stack from sscratch
and use it to store the execution context on the stack. However, since we always
use the beginning of the stack as the stable reference, this means that saving
the execution context will clobber anything that was on the stack. 

This seems not good to me, but is it expected that after an exception the stack
should remain stable? I feel like yeah but idk for sure. This part doesn't sit
right with me, but I will continue on with the book, maybe I will learn
something in the future that clarifies this.


2025-01-31
--------------------------------------------------------------------------------
I still don't understand why declaring a variable as an array on the c side
allows you to access a linker symbol without taking address, but using a pointer
type doesnt.

when defining a symbol in a linker script and then accessing the symbol as a
variable in c code, everything i read says that the type you declare on the c
side doesnt actually matter, so extern char my_symbol;

you use it by taking the address of the variable.

So U32 address = &my_symbol, will give you the address you are looking for.

However if you declare the variable as an array: extern char my_symbol[]; then
you can use the variable like: U32 address = my_symbol; However, if you declare
it as extern char *my_symbol; then it doesn't work, you still have


2025-01-30
--------------------------------------------------------------------------------

Machine Level CSRs
--------------------------------------------------------------------------------
medeleg: machine exception delegation register
mideleg: machine interrupt delegation register
	- implementations can provide individual read/write bits within medeleg and
	  mideleg to indicate that certain exceptions and interrupts should be
    processed directly by the S-mode trap handler

Supervisor Level CSRs
--------------------------------------------------------------------------------
stvec: supervisor trap vector
	- specifies where the trap handler is in memory

https://operating-system-in-1000-lines.vercel.app




